"use strict";var __decorate=this&&this.__decorate||function(e,f,g,h){var m,j=arguments.length,l=3>j?f:null===h?h=Object.getOwnPropertyDescriptor(f,g):h;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,f,g,h);else for(var n=e.length-1;0<=n;n--)(m=e[n])&&(l=(3>j?m(l):3<j?m(f,g,l):m(f,g))||l);return 3<j&&l&&Object.defineProperty(f,g,l),l},__metadata=this&&this.__metadata||function(e,f){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,f)};const core_1=require("@angular/core");require("errisy-string");const util=require("errisy-util");let DateTimePipe=class{transform(f){let g=new Date(f);return`${g.getFullYear()}-${(g.getMonth()+1+"").padLeft(2,"0")}-${(g.getDate()+"").padLeft(2,"0")} ${(g.getHours()+"").padLeft(2,"0")}:${(g.getMinutes()+"").padLeft(2,"0")}`}};DateTimePipe=__decorate([core_1.Pipe({name:"datetime12"}),__metadata("design:paramtypes",[])],DateTimePipe),exports.DateTimePipe=DateTimePipe;let WeekdayPipe=class{transform(f){let g=new Date(f);return util.dayOfWeek(g.getDay())}};WeekdayPipe=__decorate([core_1.Pipe({name:"weekday"}),__metadata("design:paramtypes",[])],WeekdayPipe),exports.WeekdayPipe=WeekdayPipe;let ArrayFilterPipe=class{transform(f,g,h){if(!f||!Array.isArray(f))return[];if(!h)return f;let j=h.split(/\s+/).filter(l=>0<l.length).map(l=>new RegExp(l,"ig"));return f.filter(l=>{if(!l[g])return!1;let m=l[g];return j.some(n=>{return n.lastIndex=void 0,n.test(m)})})}};ArrayFilterPipe=__decorate([core_1.Pipe({name:"filter"}),__metadata("design:paramtypes",[])],ArrayFilterPipe),exports.ArrayFilterPipe=ArrayFilterPipe;let WidthFilterPipe=class{transform(f){if(!Array.isArray(f))return"";let g=f.sort((h,j)=>Math.sign(j.value-h.value)).find(h=>window.innerWidth>=h.value);return g?g.name:""}};WidthFilterPipe=__decorate([core_1.Pipe({name:"windowwidth",pure:!1}),__metadata("design:paramtypes",[])],WidthFilterPipe),exports.WidthFilterPipe=WidthFilterPipe;let InArray=class{transform(f,g){return!!Array.isArray(g)&&g.some(h=>h==f)}};InArray=__decorate([core_1.Pipe({name:"in",pure:!1}),__metadata("design:paramtypes",[])],InArray),exports.InArray=InArray;let NotInArray=class{transform(f,g){return!!Array.isArray(g)&&g.every(h=>h!=f)}};NotInArray=__decorate([core_1.Pipe({name:"nin",pure:!1}),__metadata("design:paramtypes",[])],NotInArray),exports.NotInArray=NotInArray;