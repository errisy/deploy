"use strict";var __decorate=this&&this.__decorate||function(a,e,f,g){var l,h=arguments.length,j=3>h?e:null===g?g=Object.getOwnPropertyDescriptor(e,f):g;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)j=Reflect.decorate(a,e,f,g);else for(var m=a.length-1;0<=m;m--)(l=a[m])&&(j=(3>h?l(j):3<h?l(e,f,j):l(e,f))||j);return 3<h&&j&&Object.defineProperty(e,f,j),j},__metadata=this&&this.__metadata||function(a,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,e)};const core_1=require("@angular/core"),util=require("errisy-util");let SpanEditor=class{constructor(e){this.elementRef=e,this.editorChange=new core_1.EventEmitter,this.span=this.elementRef.nativeElement,this.span.setAttribute("contenteditable","true")}get editor(){return this.value}set editor(e){if(this.value!=e){this.value=e,null==this.value||void 0==this.value?this.value="":"string"!=typeof this.value&&(this.value+=""),this.span.innerHTML=util.escapeHTML(this.value);document}}set type(e){e&&(this.keyFilter="l"===e?f=>{if(f.key)/^([a-z0-9]|F\d+|Tab|ArrowLeft|ArrowRight|Backspace|Delete)$/i.test(f.key)||f.preventDefault();else if(f.keyCode){let g=f.keyCode;45==g||47<g&&58>g||65<g&&91>g||96<g&&123>g||8==g||f.preventDefault()}}:"n"===e?f=>{if(f.key)/^(\d|F\d+|Tab|ArrowLeft|ArrowRight|Backspace|Delete)$/i.test(f.key)||f.preventDefault();else if(f.keyCode){let g=f.keyCode;45==g||47<g&&58>g||65<g&&91>g||96<g&&123>g||8==g||f.preventDefault()}}:"z"===e?f=>{if(f.key)/^(\d|\-|F\d+|Tab|ArrowLeft|ArrowRight|Backspace|Delete)$/i.test(f.key)||f.preventDefault();else if(f.keyCode){let g=f.keyCode;45==g||47<g&&58>g||8==g||f.preventDefault()}}:"r"===e?f=>{if(f.key)/^(\d|\-|\.|F\d+|Tab|ArrowLeft|ArrowRight|Backspace|Delete)$/i.test(f.key)||f.preventDefault();else if(f.keyCode){let g=f.keyCode;45==g||47<g&&58>g||46==g||8==g||f.preventDefault()}}:void 0)}onKeydown(e){this.keyFilter&&this.keyFilter(e)}onKeyup(){let e=this.span.innerHTML;this.value=util.unescapeHTML(e),this.editorChange.emit(this.value)}};__decorate([core_1.Output(),__metadata("design:type",Object)],SpanEditor.prototype,"editorChange",void 0),__decorate([core_1.Input(),__metadata("design:type",Object),__metadata("design:paramtypes",[])],SpanEditor.prototype,"editor",null),__decorate([core_1.Input(),__metadata("design:type",Object),__metadata("design:paramtypes",[Object])],SpanEditor.prototype,"type",null),__decorate([core_1.HostListener("keydown",["$event"]),__metadata("design:type",Function),__metadata("design:paramtypes",[KeyboardEvent]),__metadata("design:returntype",void 0)],SpanEditor.prototype,"onKeydown",null),__decorate([core_1.HostListener("keyup"),__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",void 0)],SpanEditor.prototype,"onKeyup",null),SpanEditor=__decorate([core_1.Directive({selector:"[editor]"}),__metadata("design:paramtypes",[core_1.ElementRef])],SpanEditor),exports.SpanEditor=SpanEditor;let SpanBoxComponent=class{constructor(e){this.element=e,this.style_cursor="text",this.ValueChange=new core_1.EventEmitter}ngAfterContentInit(){}focusSpan(){this.Span.nativeElement.focus(),this.selectAll()}selectAll(){let e=document.createRange();e.selectNodeContents(this.Span.nativeElement);let f=window.getSelection();f.removeAllRanges(),f.addRange(e)}onSpanBlur(){this.forceNumber&&!/^\-?((\d+)|(\d+\.)|(\d+\.\d+)|(\.\d+))$/.test(this._value)&&(this._value="0",this.ValueChange.emit(0)),this.class_focus=!1}onEditorClick(e){e.stopPropagation()}set Value(e){this._value=e+""}changed(e){if(!this.forceNumber)this._value=e,this.ValueChange.emit(e);else if(/^0+$/.test(e));else if(/^\-?((\d+)|(\d+\.)|(\d+\.\d+)|(\.\d+))$/.test(e)){let f=Number.parseFloat(e);this._value=e,this.ValueChange.emit(f)}else this._value="",this.selectAll()}};__decorate([core_1.HostBinding("style.cursor"),__metadata("design:type",Object)],SpanBoxComponent.prototype,"style_cursor",void 0),__decorate([core_1.HostBinding("class.focus"),__metadata("design:type",Boolean)],SpanBoxComponent.prototype,"class_focus",void 0),__decorate([core_1.HostListener("click"),__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",void 0)],SpanBoxComponent.prototype,"focusSpan",null),__decorate([core_1.ViewChild("editor"),__metadata("design:type",core_1.ElementRef)],SpanBoxComponent.prototype,"Span",void 0),__decorate([core_1.Input(),__metadata("design:type",Object),__metadata("design:paramtypes",[Object])],SpanBoxComponent.prototype,"Value",null),__decorate([core_1.Output(),__metadata("design:type",core_1.EventEmitter)],SpanBoxComponent.prototype,"ValueChange",void 0),__decorate([core_1.Input(),__metadata("design:type",String)],SpanBoxComponent.prototype,"type",void 0),__decorate([core_1.Input(),__metadata("design:type",Boolean)],SpanBoxComponent.prototype,"forceNumber",void 0),__decorate([core_1.Input(),__metadata("design:type",String)],SpanBoxComponent.prototype,"prefix",void 0),__decorate([core_1.Input(),__metadata("design:type",String)],SpanBoxComponent.prototype,"suffix",void 0),SpanBoxComponent=__decorate([core_1.Component({selector:"spanbox,[spanbox]",template:`
<span *ngIf="prefix">{{prefix}}</span>
<span #editor [editor]="_value" [type]="type" (editorChange)="changed($event)" (click)="onEditorClick($event)" (focus)="class_focus=true" (blur)="onSpanBlur()"></span>
<span *ngIf="suffix">{{suffix}}</span>
`}),__metadata("design:paramtypes",[core_1.ElementRef])],SpanBoxComponent),exports.SpanBoxComponent=SpanBoxComponent;let ButtonCheck=ButtonCheck_1=class{constructor(e){this.elementRef=e,this.svg=this.elementRef.nativeElement,ButtonCheck_1.injectStyle(),this.svg.setAttribute("viewBox","0 0 512 512"),this.svg.innerHTML=`<rect x="30" y="30" width="452" height="452" stroke="black" stroke-width="15" fill-opacity="0"/><path class="checkbox-check" opacity="0" fill="#ff3300" d="M498.817,35.097C343.065,130.587,230.05,251.069,179.272,311.53L54.915,214.1L0,258.371l214.88,218.532  C251.863,382.177,368.985,197.04,512,65.499L498.817,35.097z" />`}static injectStyle(){if(!ButtonCheck_1.injected){let e=document.head||document.getElementsByTagName("head")[0],f=document.createElement("style");f.type="text/css",f.appendChild(document.createTextNode(`
svg[btn-check] { cursor: pointer; }
svg[btn-check]:hover > rect { fill-opacity: 1; fill: #ffff99; }
svg[btn-check]:active > rect { fill: #ff9933; }
svg[btn-check].checked > path { opacity: 1; }
`)),e.appendChild(f),ButtonCheck_1.injected=!0}}};ButtonCheck.injected=!1,ButtonCheck=ButtonCheck_1=__decorate([core_1.Directive({selector:"[btn-check]"}),__metadata("design:paramtypes",[core_1.ElementRef])],ButtonCheck),exports.ButtonCheck=ButtonCheck;let CheckBoxComponent=class{constructor(){this.ValueChange=new core_1.EventEmitter(!0)}onHostClick(){this._value=!this._value,this.ValueChange.emit(this._value)}set Value(e){this._value=e}};__decorate([core_1.HostListener("click"),__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",void 0)],CheckBoxComponent.prototype,"onHostClick",null),__decorate([core_1.Input(),__metadata("design:type",String)],CheckBoxComponent.prototype,"label",void 0),__decorate([core_1.Input(),__metadata("design:type",Boolean),__metadata("design:paramtypes",[Boolean])],CheckBoxComponent.prototype,"Value",null),__decorate([core_1.Output(),__metadata("design:type",core_1.EventEmitter)],CheckBoxComponent.prototype,"ValueChange",void 0),CheckBoxComponent=__decorate([core_1.Component({selector:"checkbox,[checkbox]",template:`
<svg btn-check height="24px" [class.checked]="_value"></svg><span>{{label}}</span>
`}),__metadata("design:paramtypes",[])],CheckBoxComponent),exports.CheckBoxComponent=CheckBoxComponent;var ButtonCheck_1;