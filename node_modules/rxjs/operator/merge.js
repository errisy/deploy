"use strict";var ArrayObservable_1=require("rxjs/observable/ArrayObservable"),mergeAll_1=require("rxjs/operator/mergeAll"),isScheduler_1=require("rxjs/util/isScheduler");function merge(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];return a.unshift(this),mergeStatic.apply(this,a)}exports.merge=merge;function mergeStatic(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];var c=Number.POSITIVE_INFINITY,d=null,e=a[a.length-1];return isScheduler_1.isScheduler(e)?(d=a.pop(),1<a.length&&"number"==typeof a[a.length-1]&&(c=a.pop())):"number"==typeof e&&(c=a.pop()),1===a.length?a[0]:new ArrayObservable_1.ArrayObservable(a,d).lift(new mergeAll_1.MergeAllOperator(c))}exports.mergeStatic=mergeStatic;